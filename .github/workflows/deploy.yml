name: Deploy Trading Bot

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Deployment platform'
        required: true
        default: 'railway'
        type: choice
        options:
        - railway
        - render
        - gcp
      environment:
        description: 'Environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run basic tests
      run: |
        python -m py_compile main.py
        python -m py_compile orchestrator.py
        python -c "import yaml; yaml.safe_load(open('config/config.yaml'))"

    - name: Test Docker build
      run: |
        docker build -t trading-bot-test .
        docker run --rm trading-bot-test python -c "print('Docker build successful!')"

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-railway:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event.inputs.platform == 'railway' || github.event.inputs.platform == '')
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Railway
      uses: railway/deploy@v1
      with:
        token: ${{ secrets.RAILWAY_TOKEN }}
        service: trading-bot
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}

  deploy-render:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.inputs.platform == 'render'
    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Render
      uses: sws2apps/render-deployment@main
      with:
        serviceId: ${{ secrets.RENDER_SERVICE_ID }}
        apiKey: ${{ secrets.RENDER_API_KEY }}
        multipleDeployment: false

  deploy-gcp:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event.inputs.platform == 'gcp'
    steps:
    - uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy trading-bot \
          --source . \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 1 \
          --max-instances 1 \
          --set-env-vars ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}

  notify:
    needs: [deploy-railway, deploy-render, deploy-gcp]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/main'
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#trading-bot'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      if: env.SLACK_WEBHOOK_URL != ''

  health-check:
    needs: [deploy-railway, deploy-render, deploy-gcp]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    steps:
    - name: Wait for deployment
      run: sleep 60

    - name: Health check
      run: |
        if [ "${{ secrets.DEPLOYMENT_URL }}" != "" ]; then
          curl -f ${{ secrets.DEPLOYMENT_URL }}/health || exit 1
          echo "✅ Health check passed!"
        else
          echo "⚠️ DEPLOYMENT_URL secret not set, skipping health check"
        fi